"use strict";(self.webpackChunkai_agents_lab=self.webpackChunkai_agents_lab||[]).push([[496],{7226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>b,frontMatter:()=>l,metadata:()=>u,toc:()=>h});var s=n(4848),o=n(8453),r=n(1470),a=n(9365),i=n(2763);const l={},c="\ud83d\udc50 Setup dev environment",u={id:"dev-env/dev-env-setup",title:"\ud83d\udc50 Setup dev environment",description:"\ud83e\uddb9 If you are doing this lab as part of a MongoDB GenAI Developer Day, you can continue in the environment you previously created.",source:"@site/docs/20-dev-env/1-dev-env-setup.mdx",sourceDirName:"20-dev-env",slug:"/dev-env/dev-env-setup",permalink:"/ai-agents-lab/docs/dev-env/dev-env-setup",draft:!1,unlisted:!1,editUrl:"https://github.com/tzehon/ai-agents-lab/blob/main/docs/20-dev-env/1-dev-env-setup.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dev Environment",permalink:"/ai-agents-lab/docs/category/dev-environment"},next:{title:"\ud83d\udc50 Setup prerequisites",permalink:"/ai-agents-lab/docs/dev-env/setup-pre-reqs"}},d={},h=[{value:"Connect to the MongoDB cluster",id:"connect-to-the-mongodb-cluster",level:3},{value:"Jupyter Notebook setup",id:"jupyter-notebook-setup",level:3},{value:"Connect to the MongoDB cluster",id:"connect-to-the-mongodb-cluster-1",level:3},{value:"Jupyter Notebook setup",id:"jupyter-notebook-setup-1",level:3}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"-setup-dev-environment",children:"\ud83d\udc50 Setup dev environment"})}),"\n",(0,s.jsxs)(n,{children:[(0,s.jsx)("summary",{children:"\ud83e\uddb9 If you are doing this lab as part of a MongoDB GenAI Developer Day, you can continue in the environment you previously created."}),(0,s.jsxs)(r.A,{groupId:"resume lab",children:[(0,s.jsxs)(a.A,{value:"Instruqt",label:"Instruqt",children:[(0,s.jsxs)(t.p,{children:["Navigate to the Instruqt lab using ",(0,s.jsx)(t.a,{href:"http://mdb.link/instruqt-ai",children:"this"})," link. Click ",(0,s.jsx)(t.strong,{children:"Continue"})," to continue in the sandbox you created previously."]}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/1-resume-sandbox.png",alt:"Resume sandbox"}),(0,s.jsxs)(t.p,{children:["In the Explorer menu, navigate to ",(0,s.jsx)(t.code,{children:"genai-devday-notebooks"})," > ",(0,s.jsx)(t.code,{children:"notebooks"})," > ",(0,s.jsx)(t.code,{children:"ai-agents-lab.ipynb"})," This is the Jupyter Notebook you will be using throughout this lab."]}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/2-nav-notebook.png",alt:"Navigate to the notebook"}),(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Notice that this documentation website is also linked in the ",(0,s.jsx)(t.code,{children:"Agents Lab Instructions"})," tab of your Instruqt sandbox. Feel free to access the documentation from there instead for the rest of the lab."]})})]}),(0,s.jsxs)(a.A,{value:"GitHub Codespaces",label:"GitHub Codespaces",children:[(0,s.jsxs)(t.p,{children:["Navigate to ",(0,s.jsx)(t.a,{href:"https://github.com/codespaces/new/mongodb-developer/genai-devday-notebooks?quickstart=1",children:"this"})," link. Click the ",(0,s.jsx)(t.strong,{children:"Resume this codespace"})," button to resume the codespace you created previously."]}),(0,s.jsx)(i.A,{url:"https://github.com/codespaces",src:"img/screenshots/20-dev-env/1-dev-env-setup/codespaces/1-resume-codespace.png",alt:"Resume codespace"}),(0,s.jsxs)(t.p,{children:["Give the codespace a few seconds to restart. When files appear in the Explorer tab, click on the file named ",(0,s.jsx)(t.code,{children:"ai-agents-lab.ipynb"})," under ",(0,s.jsx)(t.code,{children:"notebooks"}),". This is the Jupyter Notebook you will be using throughout this lab."]}),(0,s.jsx)(i.A,{url:"https://github.com/codespaces",src:"img/screenshots/20-dev-env/1-dev-env-setup/codespaces/2-nav-notebook.png",alt:"Navigate to the notebook"})]}),(0,s.jsxs)(a.A,{value:"Local",label:"Local",children:[(0,s.jsxs)(t.p,{children:["Open the browser tab where your Jupyter Server from before is running and open the file named ",(0,s.jsx)(t.code,{children:"ai-agents-lab.ipynb"}),"."]}),(0,s.jsx)(i.A,{url:"localhost:8888/tree",src:"img/screenshots/20-dev-env/1-dev-env-setup/local/1-nav-notebook.png",alt:"Jupyter Notebook"})]})]})]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["In this lab, we will be using Jupyter Notebooks, which is an interactive Python environment. If you are new to Jupyter Notebooks, use ",(0,s.jsx)(t.a,{href:"https://mongodb-developer.github.io/vector-search-lab/docs/dev-env/jupyter-notebooks",children:"this"})," guide to familiarize yourself with the environment."]})}),"\n",(0,s.jsxs)(r.A,{groupId:"setup options",children:[(0,s.jsxs)(a.A,{value:"Instruqt",label:"Instruqt",children:[(0,s.jsx)(t.p,{children:"Instruqt is a lab platform that provides cloud-based sandboxes which come pre-configured with all the tools you need to run this lab."}),(0,s.jsxs)(t.p,{children:[(0,s.jsxs)(t.strong,{children:["Navigate to the Instruqt lab using ",(0,s.jsx)(t.a,{href:"http://mdb.link/instruqt-ai",children:"this"})," link."]})," Fill out the form that appears and click ",(0,s.jsx)(t.strong,{children:"Submit and access"}),"."]}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/3-submit-form.png",alt:"Submit Instruqt form"}),(0,s.jsxs)(t.p,{children:["Click ",(0,s.jsx)(t.strong,{children:"Start"})," to launch the lab environment."]}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/4-start-sandbox-setup.png",alt:"Start Instruqt sandbox"}),(0,s.jsx)(t.p,{children:"You should see a screen with a purple progress bar indicating that Instruqt is preparing a sandbox with all the required libraries for this lab and a MongoDB cluster."}),(0,s.jsx)(t.p,{children:"Once this is done, you should see a Start button at the bottom right of the screen. Click this to enter the lab."}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/5-start-lab.png",alt:"Start Instruqt lab"}),(0,s.jsx)(t.h3,{id:"connect-to-the-mongodb-cluster",children:"Connect to the MongoDB cluster"}),(0,s.jsx)(t.p,{children:"Let's first connect to the MongoDB cluster that was created for you. This will allow you to view data we import into the cluster later in the lab, directly from the VSCode IDE."}),(0,s.jsx)(t.p,{children:"To do this, click the leaf icon in the left navigation bar of the IDE. This is MongoDB's VSCode extension."}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/6-click-leaf.png",alt:"Click leaf icon"}),(0,s.jsxs)(t.p,{children:["Under ",(0,s.jsx)(t.strong,{children:"Connections"}),", click the ",(0,s.jsx)(t.em,{children:"Local MongoDB Atlas"})," connection. This should automatically establish a connection to the local MongoDB cluster running on port 27017."]}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/7-connect-cluster.png",alt:"Connect to the cluster"}),(0,s.jsxs)(t.p,{children:['If the connection was successful, you should see a green leaf and a "connected" message appear around the ',(0,s.jsx)(t.em,{children:"Local MongoDB Atlas"})," connection."]}),(0,s.jsxs)(t.p,{children:["You will also see the default databases in the cluster appear under ",(0,s.jsx)(t.strong,{children:"Connections"}),". Any additional databases we create during the lab will also appear here."]}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/8-connection-successful.png",alt:"Connection successful"}),(0,s.jsx)(t.h3,{id:"jupyter-notebook-setup",children:"Jupyter Notebook setup"}),(0,s.jsx)(t.p,{children:"You will be filling code in a Jupyter Notebook during this lab, so let's get set up with that next!"}),(0,s.jsxs)(t.p,{children:["Within the sandbox, click on the files icon in the left navigation bar of the IDE. In the Explorer menu, navigate to ",(0,s.jsx)(t.code,{children:"genai-devday-notebooks"})," > ",(0,s.jsx)(t.code,{children:"notebooks"})," > ",(0,s.jsx)(t.code,{children:"ai-agents-lab.ipynb"})," to open the Jupyter Notebook for this lab."]}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/2-nav-notebook.png",alt:"Navigate to the notebook"}),(0,s.jsxs)(t.p,{children:["Next, select the Python interpreter by clicking ",(0,s.jsx)(t.strong,{children:"Select Kernel"})," at the top right of the IDE."]}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/9-select-kernel.png",alt:"Select kernel"}),(0,s.jsxs)(t.p,{children:["In the modal that appears, click ",(0,s.jsx)(t.strong,{children:"Python environments..."})," and select the interpreter that is marked as ",(0,s.jsx)(t.strong,{children:"Recommended"})," or ",(0,s.jsx)(t.strong,{children:"Global Env"}),"."]}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/10-python-env-modal.png",alt:"Select Python Environments"}),(0,s.jsx)(i.A,{url:"https://play.instruqt.com",src:"img/screenshots/20-dev-env/1-dev-env-setup/instruqt/11-select-recommended.png",alt:"Select recommended interpreter"}),(0,s.jsx)(t.p,{children:"That's it! You're ready for the lab!"}),(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["Notice that this documentation website is also linked in the ",(0,s.jsx)(t.code,{children:"Agents Lab Instructions"})," tab of your Instruqt sandbox. Feel free to access the documentation from there instead for the rest of the lab."]})})]}),(0,s.jsxs)(a.A,{value:"GitHub Codespaces",label:"GitHub Codespaces",children:[(0,s.jsx)(t.p,{children:"A codespace is a cloud-hosted development environment from GitHub, that comes pre-configured with all the tools you need to run this lab."}),(0,s.jsxs)(t.p,{children:[(0,s.jsxs)(t.strong,{children:["To create a codespace, navigate to ",(0,s.jsx)(t.a,{href:"https://github.com/codespaces/new/mongodb-developer/genai-devday-notebooks?quickstart=1",children:"this"})," link."]})," You will be prompted to sign into GitHub if you haven't already. Once signed in, click the ",(0,s.jsx)(t.strong,{children:"Create new codespace"})," button to create a new codespace."]}),(0,s.jsx)(i.A,{url:"https://github.com/codespaces",src:"img/screenshots/20-dev-env/1-dev-env-setup/codespaces/3-create-codespace.png",alt:"Start a codespace"}),(0,s.jsx)(t.p,{children:"Let it run for a few seconds as it prepares a Docker container with all the required libraries and a MongoDB cluster."}),(0,s.jsx)(t.h3,{id:"connect-to-the-mongodb-cluster-1",children:"Connect to the MongoDB cluster"}),(0,s.jsx)(t.p,{children:"Let's first connect to the MongoDB cluster that was created for you. This will allow you to view data we import into the cluster later in the lab, directly from the VSCode IDE."}),(0,s.jsx)(t.p,{children:"To do this, click the leaf icon in the left navigation bar of the IDE. This is MongoDB's VSCode extension."}),(0,s.jsx)(i.A,{url:"https://github.com/codespaces",src:"img/screenshots/20-dev-env/1-dev-env-setup/codespaces/4-click-leaf.png",alt:"Click leaf icon"}),(0,s.jsxs)(t.p,{children:["Under ",(0,s.jsx)(t.strong,{children:"Connections"}),", click the ",(0,s.jsx)(t.em,{children:"Local MongoDB Atlas"})," connection. This should automatically establish a connection to the local MongoDB cluster running on port 27017."]}),(0,s.jsx)(i.A,{url:"https://github.com/codespaces",src:"img/screenshots/20-dev-env/1-dev-env-setup/codespaces/5-connect-cluster.png",alt:"Connect to the cluster"}),(0,s.jsxs)(t.p,{children:['If the connection was successful, you should see a green leaf and a "connected" message appear around the ',(0,s.jsx)(t.em,{children:"Local MongoDB Atlas"})," connection."]}),(0,s.jsxs)(t.p,{children:["You will also see the default databases in the cluster appear under ",(0,s.jsx)(t.strong,{children:"Connections"}),". Any additional databases we create during the lab will also appear here."]}),(0,s.jsx)(i.A,{url:"https://github.com/codespaces",src:"img/screenshots/20-dev-env/1-dev-env-setup/codespaces/6-connection-successful.png",alt:"Connection successful"}),(0,s.jsx)(t.h3,{id:"jupyter-notebook-setup-1",children:"Jupyter Notebook setup"}),(0,s.jsx)(t.p,{children:"You will be filling code in a Jupyter Notebook during this lab, so let's get set up with that next!"}),(0,s.jsxs)(t.p,{children:["Within the codespace, click on the files icon in the left navigation bar of the IDE. In the Explorer menu, under ",(0,s.jsx)(t.code,{children:"notebooks"}),", click on the file named ",(0,s.jsx)(t.code,{children:"ai-agents-lab.ipynb"})," to open the Jupyter Notebook for this lab."]}),(0,s.jsx)(i.A,{url:"https://github.com/codespaces",src:"img/screenshots/20-dev-env/1-dev-env-setup/codespaces/2-nav-notebook.png",alt:"Navigate to the notebook"}),(0,s.jsx)(t.p,{children:"That's it! You're ready for the lab!"})]}),(0,s.jsxs)(a.A,{value:"Local",label:"Local",children:[(0,s.jsx)(t.p,{children:"To run the lab locally, follow the steps below:"}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Clone the ",(0,s.jsx)(t.a,{href:"https://github.com/mongodb-developer/genai-devday-notebooks.git",children:"GitHub repo"})," for this lab by executing the following command from the terminal:"]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"git clone https://github.com/mongodb-developer/genai-devday-notebooks.git\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"cd"})," into the ",(0,s.jsx)(t.code,{children:"notebooks"})," directory of the cloned repository:"]}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"cd genai-devday-notebooks/notebooks\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Create and activate a Python virtual environment:"}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"python -m venv ai-agents-lab\nsource ai-agents-lab/bin/activate\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Install the dependencies for this lab:"}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"pip install -r requirements.txt\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Install and launch Jupyter Notebook:"}),"\n"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"pip install notebook\njupyter notebook\n"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["In the browser tab that pops up, open the file named ",(0,s.jsx)(t.code,{children:"ai-agents-lab.ipynb"}),"."]}),"\n"]}),(0,s.jsx)(i.A,{url:"localhost:8888/tree",src:"img/screenshots/20-dev-env/1-dev-env-setup/local/1-nav-notebook.png",alt:"Jupyter Notebook"})]})]})]})}function b(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>a});n(6540);var s=n(8215);const o={tabItem:"tabItem_Ymn6"};var r=n(4848);function a(e){let{children:t,hidden:n,className:a}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(o.tabItem,a),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>k});var s=n(6540),o=n(8215),r=n(3104),a=n(6347),i=n(205),l=n(7485),c=n(1682),u=n(679);function d(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:o}}=e;return{value:t,label:n,attributes:s,default:o}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const o=(0,a.W6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(r),(0,s.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function v(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=h(e),[a,l]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:r}))),[c,d]=b({queryString:n,groupId:o}),[v,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,u.Dv)(n);return[o,(0,s.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),g=(()=>{const e=c??v;return p({value:e,tabValues:r})?e:null})();(0,i.A)((()=>{g&&l(g)}),[g]);return{selectedValue:a,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),m(e)}),[d,m,r]),tabValues:r}}var m=n(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=n(4848);function j(e){let{className:t,block:n,selectedValue:s,selectValue:a,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.a_)(),u=e=>{const t=e.currentTarget,n=l.indexOf(t),o=i[n].value;o!==s&&(c(t),a(o))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>l.push(e),onKeyDown:d,onClick:u,...r,className:(0,o.A)("tabs__item",g.tabItem,r?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function f(e){let{lazy:t,children:n,selectedValue:r}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===r));return e?(0,s.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function y(e){const t=v(e);return(0,x.jsxs)("div",{className:(0,o.A)("tabs-container",g.tabList),children:[(0,x.jsx)(j,{...t,...e}),(0,x.jsx)(f,{...t,...e})]})}function k(e){const t=(0,m.A)();return(0,x.jsx)(y,{...e,children:d(e.children)},String(t))}},2763:(e,t,n)=>{n.d(t,{A:()=>a});n(6540);var s=n(4848);function o(e){const t=e.url||"http://localhost:3000";return(0,s.jsxs)("div",{className:"browser container",children:[(0,s.jsxs)("div",{className:"row",children:[(0,s.jsxs)("div",{className:"column left",children:[(0,s.jsx)("span",{className:"dot",style:{background:"#ED594A"}}),(0,s.jsx)("span",{className:"dot",style:{background:"#FDD800"}}),(0,s.jsx)("span",{className:"dot",style:{background:"#5AC05A"}})]}),(0,s.jsx)("div",{className:"column middle",children:(0,s.jsx)("input",{type:"text",value:t})}),(0,s.jsx)("div",{className:"column right",children:(0,s.jsxs)("div",{style:{float:"right"},children:[(0,s.jsx)("span",{className:"bar"}),(0,s.jsx)("span",{className:"bar"}),(0,s.jsx)("span",{className:"bar"})]})})]}),(0,s.jsx)("div",{className:"content",children:e.children})]})}var r=n(6025);function a(e){return(0,s.jsx)(o,{...e,children:(0,s.jsx)("img",{src:(0,r.Ay)(e.src),alt:e.alt})})}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>i});var s=n(6540);const o={},r=s.createContext(o);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);