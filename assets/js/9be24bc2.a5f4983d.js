"use strict";(self.webpackChunkai_agents_lab=self.webpackChunkai_agents_lab||[]).push([[362],{6792:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>l,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var i=t(4848),r=t(8453);const s={},a="\ud83d\udcd8 Vector Search",c={id:"key-concepts/vector-search",title:"\ud83d\udcd8 Vector Search",description:"Vector search",source:"@site/docs/10-key-concepts/2-vector-search.mdx",sourceDirName:"10-key-concepts",slug:"/key-concepts/vector-search",permalink:"/ai-agents-lab/docs/key-concepts/vector-search",draft:!1,unlisted:!1,editUrl:"https://github.com/tzehon/ai-agents-lab/blob/main/docs/10-key-concepts/2-vector-search.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcd8 Embeddings",permalink:"/ai-agents-lab/docs/key-concepts/embeddings"},next:{title:"\ud83d\udcd8 What are AI agents?",permalink:"/ai-agents-lab/docs/key-concepts/what-are-ai-agents"}},o={},d=[{value:"Vector search",id:"vector-search",level:2},{value:"Vector search in MongoDB",id:"vector-search-in-mongodb",level:2},{value:"Sample Document with Embeddings",id:"sample-document-with-embeddings",level:3},{value:"Creating a Vector Search Index",id:"creating-a-vector-search-index",level:3}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-vector-search",children:"\ud83d\udcd8 Vector Search"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:t(1058).A+"",width:"1449",height:"531"})}),"\n",(0,i.jsx)(n.h2,{id:"vector-search",children:"Vector search"}),"\n",(0,i.jsx)(n.p,{children:"Vector search, a.k.a. semantic search is an information retrieval technique that retrieves data based on intent or meaning."}),"\n",(0,i.jsx)(n.p,{children:"Unlike traditional full-text search which finds keyword matches, vector search uses embeddings to find items closest to your search query in multi-dimensional vector space. The closer the embeddings are to your query, the more similar they are in meaning."}),"\n",(0,i.jsx)(n.h2,{id:"vector-search-in-mongodb",children:"Vector search in MongoDB"}),"\n",(0,i.jsx)(n.p,{children:"In MongoDB, you can semantically search through your data using MongoDB Atlas Vector Search."}),"\n",(0,i.jsx)(n.h3,{id:"sample-document-with-embeddings",children:"Sample Document with Embeddings"}),"\n",(0,i.jsx)(n.p,{children:"Before diving into how to index and search, let's look at what a document with embeddings actually looks like in MongoDB. Here's a typical document that contains both text content and its corresponding vector embedding:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "_id": "doc_001",\n  "title": "Introduction to Machine Learning",\n  "content": "Machine learning is a subset of artificial intelligence that enables computers to learn from data without being explicitly programmed. It uses algorithms that iteratively learn from data to improve their accuracy.",\n  "metadata": {\n    "author": "Tech Education Team",\n    "category": "AI/ML",\n    "pages": 42,\n    "published_date": "2024-03-15"\n  },\n  "embedding": [\n    0.02421053,\n    -0.022372592,\n    0.015163446,\n    -0.008812144,\n    0.013908824,\n    -0.029230956,\n    0.018722257,\n    -0.016831137,\n    0.006148927,\n    0.011683439,\n    // ... truncated for brevity - typically 1536 dimensions for OpenAI embeddings\n    0.003421892,\n    -0.017234589\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"In this example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Text Fields"}),": The ",(0,i.jsx)(n.code,{children:"title"})," and ",(0,i.jsx)(n.code,{children:"content"})," fields contain the human-readable text"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Embedding Field"}),": The ",(0,i.jsx)(n.code,{children:"embedding"})," array contains the vector representation of the text content","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"These numbers were generated by passing the text through an embedding model"}),"\n",(0,i.jsx)(n.li,{children:"Each number represents a dimension in the vector space"}),"\n",(0,i.jsx)(n.li,{children:"The length of this array (number of dimensions) depends on the embedding model used"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Metadata Fields"}),": Additional fields like ",(0,i.jsx)(n.code,{children:"author"}),", ",(0,i.jsx)(n.code,{children:"category"}),", and ",(0,i.jsx)(n.code,{children:"pages"})," can be used for filtering during vector search"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The embedding captures the semantic meaning of the text. Documents with similar content will have embeddings that are close together in the vector space, which is what makes semantic search possible."}),"\n",(0,i.jsx)(n.h3,{id:"creating-a-vector-search-index",children:"Creating a Vector Search Index"}),"\n",(0,i.jsx)(n.p,{children:"To perform vector search on your data in MongoDB, you need to create a vector search index. An example of a vector search index definition looks as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "fields":[\n    {\n      "type": "vector",\n      "path": "embedding",\n      "numDimensions": 1536,\n      "similarity": "cosine"\n    },\n    {\n      "type": "filter",\n      "path": "pages"\n    },\n    ...\n  ]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the index definition, you specify the path to the embedding field (",(0,i.jsx)(n.code,{children:"path"}),"), the number of dimensions in the embedding vectors (",(0,i.jsx)(n.code,{children:"numDimensions"}),"), and a similarity metric that specifies how to determine nearest neighbors in vector space (",(0,i.jsx)(n.code,{children:"similarity"}),"). You can also index filter fields that allow you to pre-filter on certain metadata to narrow the scope of the vector search."]}),"\n",(0,i.jsxs)(n.p,{children:["Vector search in MongoDB takes the form of an aggregation pipeline stage. It always needs to be the first stage in the pipeline and can be followed by other stages to further process the semantic search results. An example pipeline including the ",(0,i.jsx)(n.code,{children:"$vectorSearch"})," stage is as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'[\n  {\n    "$vectorSearch": {\n      "index": "vector_index",\n      "path": "embedding",\n      "queryVector": [0.02421053, -0.022372592,...],\n      "numCandidates": 150,\n      "filter": {"pages": 100},\n      "limit": 10\n    }\n  },\n  {\n    "$project": {\n      "_id": 0,\n      "title": 1,\n      "score": {"$meta": "vectorSearchScore"}\n    }\n  }\n]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this example, you can see a vector search query with a pre-filter. The ",(0,i.jsx)(n.code,{children:"limit"})," field in the query definition specifies how many documents to return from the vector search."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"$project"})," stage that follows only returns documents with the ",(0,i.jsx)(n.code,{children:"title"})," field and the similarity score from the vector search."]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1058:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/vector-search-08c46040b6c71dcd6ef46ab1bf9f26d0.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);